// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	auth "github.com/rokwire/rokwire-building-block-sdk-go/services/core/auth"
	mock "github.com/stretchr/testify/mock"
)

// ServiceAccountLoader is an autogenerated mock type for the ServiceAccountLoader type
type ServiceAccountLoader struct {
	mock.Mock
	authService *auth.Service
}

// LoadAccessToken provides a mock function with given fields: appID, orgID
func (_m *ServiceAccountLoader) LoadAccessToken(appID string, orgID string) (*auth.AccessToken, error) {
	ret := _m.Called(appID, orgID)

	if len(ret) == 0 {
		panic("no return value specified for LoadAccessToken")
	}

	var r0 *auth.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*auth.AccessToken, error)); ok {
		return rf(appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *auth.AccessToken); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAccessTokens provides a mock function with given fields:
func (_m *ServiceAccountLoader) LoadAccessTokens() (map[auth.AppOrgPair]auth.AccessToken, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadAccessTokens")
	}

	var r0 map[auth.AppOrgPair]auth.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[auth.AppOrgPair]auth.AccessToken, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[auth.AppOrgPair]auth.AccessToken); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[auth.AppOrgPair]auth.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func NewServiceAccountLoader(authService *auth.Service) *ServiceAccountLoader {
	return &ServiceAccountLoader{authService: authService}
}
