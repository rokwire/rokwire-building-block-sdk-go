// Code generated by api-generator DO NOT EDIT.
package web

import (
	"github.com/gorilla/mux"

	"github.com/rokwire/rokwire-building-block-sdk-go/services/common"
	"github.com/rokwire/rokwire-building-block-sdk-go/services/core/auth/tokenauth"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/errors"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/logging/logutils"
)

func (a *Adapter[T]) registerHandler(router *mux.Router, pathStr string, method string, tag string, coreFunc string, dataType string, authType interface{},
	requestBody interface{}, conversionFunc interface{}) error {
	authorization, err := a.getAuthHandler(tag, authType)
	if err != nil {
		return errors.WrapErrorAction(logutils.ActionGet, "api auth handler", nil, err)
	}

	coreHandler, err := a.getCoreHandler(tag, coreFunc)
	if err != nil {
		return errors.WrapErrorAction(logutils.ActionGet, "api core handler", nil, err)
	}

	var convFunc interface{}
	if conversionFunc != nil {
		convFunc, err = a.getConversionFunc(conversionFunc)
		if err != nil {
			return errors.WrapErrorAction(logutils.ActionGet, "request body conversion function", nil, err)
		}
	}

	switch dataType {
	case "string":
		handler := NewAPIHandler[string, string, string](authorization, nil, logutils.MessageDataType(dataType))
		err = handler.SetCoreHandler(coreHandler, method, tag, coreFunc)
		if err != nil {
			return errors.WrapErrorAction(logutils.ActionApply, "api core handler", &logutils.FieldArgs{"name": tag + "." + coreFunc}, err)
		}

		router.HandleFunc(pathStr, handler.HandleRequest(a.Paths, a.Logger)).Methods(method)
	case "common.Config":
		switch requestBody {
		case "#/components/schemas/_admin_req_update_configs":
			convert, ok := convFunc.(func(*tokenauth.Claims, *adminReqUpdateConfigs) (*common.Config, error))
			if !ok {
				return errors.ErrorData(logutils.StatusInvalid, "request body conversion function", &logutils.FieldArgs{"x-conversion-function": conversionFunc})
			}

			handler := NewAPIHandler[common.Config, adminReqUpdateConfigs, common.Config](authorization, convert, common.TypeConfig)
			err = handler.SetCoreHandler(coreHandler, method, tag, coreFunc)
			if err != nil {
				return errors.WrapErrorAction(logutils.ActionApply, "api core handler", &logutils.FieldArgs{"name": tag + "." + coreFunc}, err)
			}

			router.HandleFunc(pathStr, handler.HandleRequest(a.Paths, a.Logger)).Methods(method)
		default:
			handler := NewAPIHandler[common.Config, common.Config, common.Config](authorization, nil, common.TypeConfig)
			err = handler.SetCoreHandler(coreHandler, method, tag, coreFunc)
			if err != nil {
				return errors.WrapErrorAction(logutils.ActionApply, "api core handler", &logutils.FieldArgs{"name": tag + "." + coreFunc}, err)
			}

			router.HandleFunc(pathStr, handler.HandleRequest(a.Paths, a.Logger)).Methods(method)
		}
	default:
		return a.RegisterGeneratedHandlerFunc(router, pathStr, method, tag, coreFunc, dataType, authType, requestBody, conversionFunc)
	}

	return nil
}

func (a *Adapter[T]) getAuthHandler(tag string, ref interface{}) (tokenauth.Handler, error) {
	if ref == nil {
		return nil, nil
	}

	var handler tokenauth.Handlers
	switch tag {
	case "Client":
		handler = a.Auth.Client
	case "Admin":
		handler = a.Auth.Admin
	case "BBs":
		handler = a.Auth.BBs
	case "TPS":
		handler = a.Auth.TPS
	case "System":
		handler = a.Auth.System
	default:
		return nil, errors.ErrorData(logutils.StatusInvalid, "tag", &logutils.FieldArgs{"tag": tag})
	}

	switch ref {
	case "User":
		return handler.User, nil
	case "Standard":
		return handler.Standard, nil
	case "Authenticated":
		return handler.Authenticated, nil
	case "Permissions":
		return handler.Permissions, nil
	default:
		return a.AuthHandlerGetter(tag, ref)
	}
}

func (a *Adapter[T]) getCoreHandler(tag string, ref string) (interface{}, error) {
	switch tag + ref {
	case "DefaultGetVersion":
		return a.apisHandler.defaultGetVersion, nil
	case "AdminGetConfigs":
		return a.apisHandler.adminGetConfigs, nil
	case "AdminCreateConfig":
		return a.apisHandler.adminCreateConfig, nil
	case "AdminGetConfig":
		return a.apisHandler.adminGetConfig, nil
	case "AdminUpdateConfig":
		return a.apisHandler.adminUpdateConfig, nil
	case "AdminDeleteConfig":
		return a.apisHandler.adminDeleteConfig, nil
	default:
		return a.CoreHandlerGetter(tag, ref)
	}
}

func (a *Adapter[T]) getConversionFunc(ref interface{}) (interface{}, error) {
	if ref == nil {
		return nil, nil
	}

	switch ref {
	case "configFromRequest":
		return configFromRequest, nil
	default:
		return a.ConversionFuncGetter(ref)
	}
}
