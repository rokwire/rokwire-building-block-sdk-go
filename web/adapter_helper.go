// Code generated by api-generator DO NOT EDIT.
package web

import (
	"github.com/gorilla/mux"

	"github.com/rokwire/rokwire-building-block-sdk-go/services/common"
	"github.com/rokwire/rokwire-building-block-sdk-go/services/core/auth/tokenauth"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/errors"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/logging/logutils"
)

// apiDataType represents any stored data type that may be read/written by an API
type apiDataType interface {
	string |
		common.Config
}

// requestDataType represents any data type that may be sent in an API request body
type requestDataType interface {
	apiDataType |
		adminReqUpdateConfigs
}

func (a *Adapter) registerHandler(router *mux.Router, pathStr string, method string, tag string, coreFunc string, dataType string, authType interface{},
	requestBody interface{}, conversionFunc interface{}) error {
	authorization, err := a.getAuthHandler(tag, authType)
	if err != nil {
		return errors.WrapErrorAction(logutils.ActionGet, "api auth handler", nil, err)
	}

	coreHandler, err := a.getCoreHandler(tag, coreFunc)
	if err != nil {
		return errors.WrapErrorAction(logutils.ActionGet, "api core handler", nil, err)
	}

	var convFunc interface{}
	if conversionFunc != nil {
		convFunc, err = a.getConversionFunc(conversionFunc)
		if err != nil {
			return errors.WrapErrorAction(logutils.ActionGet, "request body conversion function", nil, err)
		}
	}

	switch dataType {
	case "string":
		handler := apiHandler[string, string, string]{authorization: authorization, messageDataType: logutils.MessageDataType(dataType)}
		err = setCoreHandler[string, string, string](&handler, coreHandler, method, tag, coreFunc)
		if err != nil {
			return errors.WrapErrorAction(logutils.ActionApply, "api core handler", &logutils.FieldArgs{"name": tag + "." + coreFunc}, err)
		}

		router.HandleFunc(pathStr, handleRequest[string, string, string](&handler, a.paths, a.logger)).Methods(method)
	case "common.Config":
		switch requestBody {
		case "#/components/schemas/_admin_req_update_configs":
			convert, ok := convFunc.(func(*tokenauth.Claims, *adminReqUpdateConfigs) (*common.Config, error))
			if !ok {
				return errors.ErrorData(logutils.StatusInvalid, "request body conversion function", &logutils.FieldArgs{"x-conversion-function": conversionFunc})
			}

			handler := apiHandler[common.Config, adminReqUpdateConfigs, common.Config]{authorization: authorization, conversionFunc: convert, messageDataType: common.TypeConfig}
			err = setCoreHandler[common.Config, adminReqUpdateConfigs, common.Config](&handler, coreHandler, method, tag, coreFunc)
			if err != nil {
				return errors.WrapErrorAction(logutils.ActionApply, "api core handler", &logutils.FieldArgs{"name": tag + "." + coreFunc}, err)
			}

			router.HandleFunc(pathStr, handleRequest[common.Config, adminReqUpdateConfigs, common.Config](&handler, a.paths, a.logger)).Methods(method)
		default:
			handler := apiHandler[common.Config, common.Config, common.Config]{authorization: authorization, messageDataType: common.TypeConfig}
			err = setCoreHandler[common.Config, common.Config, common.Config](&handler, coreHandler, method, tag, coreFunc)
			if err != nil {
				return errors.WrapErrorAction(logutils.ActionApply, "api core handler", &logutils.FieldArgs{"name": tag + "." + coreFunc}, err)
			}

			router.HandleFunc(pathStr, handleRequest[common.Config, common.Config, common.Config](&handler, a.paths, a.logger)).Methods(method)
		}
	default:
		return errors.ErrorData(logutils.StatusInvalid, "data type reference", nil)
	}

	return nil
}

func (a *Adapter) getAuthHandler(tag string, ref interface{}) (tokenauth.Handler, error) {
	if ref == nil {
		return nil, nil
	}

	var handler tokenauth.Handlers
	switch tag {
	case "Client":
		handler = a.auth.client
	case "Admin":
		handler = a.auth.admin
	case "BBs":
		handler = a.auth.bbs
	case "TPS":
		handler = a.auth.tps
	case "System":
		handler = a.auth.system
	default:
		return nil, errors.ErrorData(logutils.StatusInvalid, "tag", &logutils.FieldArgs{"tag": tag})
	}

	switch ref {
	case "User":
		return handler.User, nil
	case "Standard":
		return handler.Standard, nil
	case "Authenticated":
		return handler.Authenticated, nil
	case "Permissions":
		return handler.Permissions, nil
	default:
		return nil, errors.ErrorData(logutils.StatusInvalid, "authentication type reference", &logutils.FieldArgs{"ref": ref})
	}
}

func (a *Adapter) getCoreHandler(tag string, ref string) (interface{}, error) {
	switch tag + ref {
	// case "DefaultGetVersion":
	// 	return a.apisHandler.defaultGetVersion, nil
	// case "AdminGetConfigs":
	// 	return a.apisHandler.adminGetConfigs, nil
	// case "AdminCreateConfig":
	// 	return a.apisHandler.adminCreateConfig, nil
	// case "AdminGetConfig":
	// 	return a.apisHandler.adminGetConfig, nil
	// case "AdminUpdateConfig":
	// 	return a.apisHandler.adminUpdateConfig, nil
	// case "AdminDeleteConfig":
	// 	return a.apisHandler.adminDeleteConfig, nil
	default:
		return nil, errors.ErrorData(logutils.StatusInvalid, "core function", logutils.StringArgs(tag+ref))
	}
}

func (a *Adapter) getConversionFunc(ref interface{}) (interface{}, error) {
	if ref == nil {
		return nil, nil
	}

	switch ref {
	case "configFromRequest":
		return configFromRequest, nil
	default:
		return nil, errors.ErrorData(logutils.StatusInvalid, "conversion function reference", &logutils.FieldArgs{"ref": ref})
	}
}
