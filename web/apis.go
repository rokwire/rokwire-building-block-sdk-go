// Code generated by api-generator DO NOT EDIT.
package web

import (
	"github.com/rokwire/rokwire-building-block-sdk-go/services/common"
	"github.com/rokwire/rokwire-building-block-sdk-go/services/core/auth/tokenauth"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/errors"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/logging/logutils"
	"github.com/rokwire/rokwire-building-block-sdk-go/utils/rokwireutils"
)

// APIsHandler handles the rest APIs implementation
type APIsHandler[T common.Storage] struct {
	app *common.Application[T]
}

// Default

func (a APIsHandler[T]) defaultGetVersion(claims *tokenauth.Claims, params map[string]interface{}) (*string, error) {
	return a.app.Default.GetVersion()
}

// Admin

func (a APIsHandler[T]) adminGetConfigs(claims *tokenauth.Claims, params map[string]interface{}) ([]common.Config, error) {
	configType, err := rokwireutils.GetValue[*string](params, "config_type", false)
	if err != nil {
		return nil, errors.WrapErrorAction(logutils.ActionGet, logutils.TypePathParam, logutils.StringArgs("config_type"), err)
	}

	return a.app.Admin.GetConfigs(claims, configType)
}

func (a APIsHandler[T]) adminCreateConfig(claims *tokenauth.Claims, params map[string]interface{}, item *common.Config) (*common.Config, error) {
	return a.app.Admin.CreateConfig(claims, *item)
}

func (a APIsHandler[T]) adminGetConfig(claims *tokenauth.Claims, params map[string]interface{}) (*common.Config, error) {
	id, err := rokwireutils.GetValue[string](params, "id", true)
	if err != nil {
		return nil, errors.WrapErrorAction(logutils.ActionGet, logutils.TypePathParam, logutils.StringArgs("id"), err)
	}

	return a.app.Admin.GetConfig(claims, id)
}

func (a APIsHandler[T]) adminUpdateConfig(claims *tokenauth.Claims, params map[string]interface{}, item *common.Config) (*common.Config, error) {
	id, err := rokwireutils.GetValue[string](params, "id", true)
	if err != nil {
		return nil, errors.WrapErrorAction(logutils.ActionGet, logutils.TypePathParam, logutils.StringArgs("id"), err)
	}

	return a.app.Admin.UpdateConfig(claims, id, *item)
}

func (a APIsHandler[T]) adminDeleteConfig(claims *tokenauth.Claims, params map[string]interface{}) error {
	id, err := rokwireutils.GetValue[string](params, "id", true)
	if err != nil {
		return errors.WrapErrorAction(logutils.ActionGet, logutils.TypePathParam, logutils.StringArgs("id"), err)
	}

	return a.app.Admin.DeleteConfig(claims, id)
}

// NewAPIsHandler creates new API handler instance
func NewAPIsHandler[T common.Storage](app *common.Application[T]) APIsHandler[T] {
	return APIsHandler[T]{app: app}
}
